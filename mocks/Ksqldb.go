// Code generated by mockery v2.9.4. DO NOT EDIT.

package ksqldb

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	ksqldb "github.com/oscarzhou/ksqldb-go"
)

// Ksqldb is an autogenerated mock type for the Ksqldb type
type Ksqldb struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Ksqldb) Close() {
	_m.Called()
}

// EnableParseSQL provides a mock function with given fields: _a0
func (_m *Ksqldb) EnableParseSQL(_a0 bool) {
	_m.Called(_a0)
}

// GetClusterStatus provides a mock function with given fields:
func (_m *Ksqldb) GetClusterStatus() (*ksqldb.ClusterStatusResponse, error) {
	ret := _m.Called()

	var r0 *ksqldb.ClusterStatusResponse
	if rf, ok := ret.Get(0).(func() *ksqldb.ClusterStatusResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ksqldb.ClusterStatusResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServerInfo provides a mock function with given fields:
func (_m *Ksqldb) GetServerInfo() (*ksqldb.KsqlServerInfo, error) {
	ret := _m.Called()

	var r0 *ksqldb.KsqlServerInfo
	if rf, ok := ret.Get(0).(func() *ksqldb.KsqlServerInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ksqldb.KsqlServerInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServerStatus provides a mock function with given fields:
func (_m *Ksqldb) GetServerStatus() (*ksqldb.ServerStatusResponse, error) {
	ret := _m.Called()

	var r0 *ksqldb.ServerStatusResponse
	if rf, ok := ret.Get(0).(func() *ksqldb.ServerStatusResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ksqldb.ServerStatusResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseSQLEnabled provides a mock function with given fields:
func (_m *Ksqldb) ParseSQLEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Pull provides a mock function with given fields: _a0, _a1, _a2
func (_m *Ksqldb) Pull(_a0 context.Context, _a1 string, _a2 bool) (ksqldb.Header, ksqldb.Payload, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 ksqldb.Header
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) ksqldb.Header); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(ksqldb.Header)
	}

	var r1 ksqldb.Payload
	if rf, ok := ret.Get(1).(func(context.Context, string, bool) ksqldb.Payload); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(ksqldb.Payload)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, bool) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Push provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Ksqldb) Push(_a0 context.Context, _a1 string, _a2 chan<- ksqldb.Row, _a3 chan<- ksqldb.Header) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, chan<- ksqldb.Row, chan<- ksqldb.Header) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TerminateCluster provides a mock function with given fields: topics
func (_m *Ksqldb) TerminateCluster(topics ...string) (*ksqldb.KsqlResponseSlice, error) {
	_va := make([]interface{}, len(topics))
	for _i := range topics {
		_va[_i] = topics[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ksqldb.KsqlResponseSlice
	if rf, ok := ret.Get(0).(func(...string) *ksqldb.KsqlResponseSlice); ok {
		r0 = rf(topics...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ksqldb.KsqlResponseSlice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(topics...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateProperty provides a mock function with given fields: property
func (_m *Ksqldb) ValidateProperty(property string) (*bool, error) {
	ret := _m.Called(property)

	var r0 *bool
	if rf, ok := ret.Get(0).(func(string) *bool); ok {
		r0 = rf(property)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(property)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
