// Code generated by mockery v2.9.4. DO NOT EDIT.

package parser

import (
	antlr "github.com/antlr/antlr4/runtime/Go/antlr"
	mock "github.com/stretchr/testify/mock"

	parser "github.com/oscarzhou/ksqldb-go/parser"
)

// KSqlListener is an autogenerated mock type for the KSqlListener type
type KSqlListener struct {
	mock.Mock
}

// EnterAliasedRelation provides a mock function with given fields: c
func (_m *KSqlListener) EnterAliasedRelation(c *parser.AliasedRelationContext) {
	_m.Called(c)
}

// EnterAlterOption provides a mock function with given fields: c
func (_m *KSqlListener) EnterAlterOption(c *parser.AlterOptionContext) {
	_m.Called(c)
}

// EnterAlterSource provides a mock function with given fields: c
func (_m *KSqlListener) EnterAlterSource(c *parser.AlterSourceContext) {
	_m.Called(c)
}

// EnterArithmeticBinary provides a mock function with given fields: c
func (_m *KSqlListener) EnterArithmeticBinary(c *parser.ArithmeticBinaryContext) {
	_m.Called(c)
}

// EnterArithmeticUnary provides a mock function with given fields: c
func (_m *KSqlListener) EnterArithmeticUnary(c *parser.ArithmeticUnaryContext) {
	_m.Called(c)
}

// EnterArrayConstructor provides a mock function with given fields: c
func (_m *KSqlListener) EnterArrayConstructor(c *parser.ArrayConstructorContext) {
	_m.Called(c)
}

// EnterAssertStream provides a mock function with given fields: c
func (_m *KSqlListener) EnterAssertStream(c *parser.AssertStreamContext) {
	_m.Called(c)
}

// EnterAssertTable provides a mock function with given fields: c
func (_m *KSqlListener) EnterAssertTable(c *parser.AssertTableContext) {
	_m.Called(c)
}

// EnterAssertTombstone provides a mock function with given fields: c
func (_m *KSqlListener) EnterAssertTombstone(c *parser.AssertTombstoneContext) {
	_m.Called(c)
}

// EnterAssertValues provides a mock function with given fields: c
func (_m *KSqlListener) EnterAssertValues(c *parser.AssertValuesContext) {
	_m.Called(c)
}

// EnterAtTimeZone provides a mock function with given fields: c
func (_m *KSqlListener) EnterAtTimeZone(c *parser.AtTimeZoneContext) {
	_m.Called(c)
}

// EnterBackQuotedIdentifier provides a mock function with given fields: c
func (_m *KSqlListener) EnterBackQuotedIdentifier(c *parser.BackQuotedIdentifierContext) {
	_m.Called(c)
}

// EnterBaseType provides a mock function with given fields: c
func (_m *KSqlListener) EnterBaseType(c *parser.BaseTypeContext) {
	_m.Called(c)
}

// EnterBetween provides a mock function with given fields: c
func (_m *KSqlListener) EnterBetween(c *parser.BetweenContext) {
	_m.Called(c)
}

// EnterBooleanDefault provides a mock function with given fields: c
func (_m *KSqlListener) EnterBooleanDefault(c *parser.BooleanDefaultContext) {
	_m.Called(c)
}

// EnterBooleanLiteral provides a mock function with given fields: c
func (_m *KSqlListener) EnterBooleanLiteral(c *parser.BooleanLiteralContext) {
	_m.Called(c)
}

// EnterBooleanValue provides a mock function with given fields: c
func (_m *KSqlListener) EnterBooleanValue(c *parser.BooleanValueContext) {
	_m.Called(c)
}

// EnterCast provides a mock function with given fields: c
func (_m *KSqlListener) EnterCast(c *parser.CastContext) {
	_m.Called(c)
}

// EnterColumnReference provides a mock function with given fields: c
func (_m *KSqlListener) EnterColumnReference(c *parser.ColumnReferenceContext) {
	_m.Called(c)
}

// EnterColumns provides a mock function with given fields: c
func (_m *KSqlListener) EnterColumns(c *parser.ColumnsContext) {
	_m.Called(c)
}

// EnterComparison provides a mock function with given fields: c
func (_m *KSqlListener) EnterComparison(c *parser.ComparisonContext) {
	_m.Called(c)
}

// EnterComparisonOperator provides a mock function with given fields: c
func (_m *KSqlListener) EnterComparisonOperator(c *parser.ComparisonOperatorContext) {
	_m.Called(c)
}

// EnterConcatenation provides a mock function with given fields: c
func (_m *KSqlListener) EnterConcatenation(c *parser.ConcatenationContext) {
	_m.Called(c)
}

// EnterCreateConnector provides a mock function with given fields: c
func (_m *KSqlListener) EnterCreateConnector(c *parser.CreateConnectorContext) {
	_m.Called(c)
}

// EnterCreateStream provides a mock function with given fields: c
func (_m *KSqlListener) EnterCreateStream(c *parser.CreateStreamContext) {
	_m.Called(c)
}

// EnterCreateStreamAs provides a mock function with given fields: c
func (_m *KSqlListener) EnterCreateStreamAs(c *parser.CreateStreamAsContext) {
	_m.Called(c)
}

// EnterCreateTable provides a mock function with given fields: c
func (_m *KSqlListener) EnterCreateTable(c *parser.CreateTableContext) {
	_m.Called(c)
}

// EnterCreateTableAs provides a mock function with given fields: c
func (_m *KSqlListener) EnterCreateTableAs(c *parser.CreateTableAsContext) {
	_m.Called(c)
}

// EnterDecimalLiteral provides a mock function with given fields: c
func (_m *KSqlListener) EnterDecimalLiteral(c *parser.DecimalLiteralContext) {
	_m.Called(c)
}

// EnterDefineVariable provides a mock function with given fields: c
func (_m *KSqlListener) EnterDefineVariable(c *parser.DefineVariableContext) {
	_m.Called(c)
}

// EnterDereference provides a mock function with given fields: c
func (_m *KSqlListener) EnterDereference(c *parser.DereferenceContext) {
	_m.Called(c)
}

// EnterDescribeConnector provides a mock function with given fields: c
func (_m *KSqlListener) EnterDescribeConnector(c *parser.DescribeConnectorContext) {
	_m.Called(c)
}

// EnterDescribeFunction provides a mock function with given fields: c
func (_m *KSqlListener) EnterDescribeFunction(c *parser.DescribeFunctionContext) {
	_m.Called(c)
}

// EnterDescribeStreams provides a mock function with given fields: c
func (_m *KSqlListener) EnterDescribeStreams(c *parser.DescribeStreamsContext) {
	_m.Called(c)
}

// EnterDigitIdentifier provides a mock function with given fields: c
func (_m *KSqlListener) EnterDigitIdentifier(c *parser.DigitIdentifierContext) {
	_m.Called(c)
}

// EnterDistinctFrom provides a mock function with given fields: c
func (_m *KSqlListener) EnterDistinctFrom(c *parser.DistinctFromContext) {
	_m.Called(c)
}

// EnterDropConnector provides a mock function with given fields: c
func (_m *KSqlListener) EnterDropConnector(c *parser.DropConnectorContext) {
	_m.Called(c)
}

// EnterDropStream provides a mock function with given fields: c
func (_m *KSqlListener) EnterDropStream(c *parser.DropStreamContext) {
	_m.Called(c)
}

// EnterDropTable provides a mock function with given fields: c
func (_m *KSqlListener) EnterDropTable(c *parser.DropTableContext) {
	_m.Called(c)
}

// EnterDropType provides a mock function with given fields: c
func (_m *KSqlListener) EnterDropType(c *parser.DropTypeContext) {
	_m.Called(c)
}

// EnterEveryRule provides a mock function with given fields: ctx
func (_m *KSqlListener) EnterEveryRule(ctx antlr.ParserRuleContext) {
	_m.Called(ctx)
}

// EnterExplain provides a mock function with given fields: c
func (_m *KSqlListener) EnterExplain(c *parser.ExplainContext) {
	_m.Called(c)
}

// EnterExpression provides a mock function with given fields: c
func (_m *KSqlListener) EnterExpression(c *parser.ExpressionContext) {
	_m.Called(c)
}

// EnterFloatLiteral provides a mock function with given fields: c
func (_m *KSqlListener) EnterFloatLiteral(c *parser.FloatLiteralContext) {
	_m.Called(c)
}

// EnterFunctionArgument provides a mock function with given fields: c
func (_m *KSqlListener) EnterFunctionArgument(c *parser.FunctionArgumentContext) {
	_m.Called(c)
}

// EnterFunctionCall provides a mock function with given fields: c
func (_m *KSqlListener) EnterFunctionCall(c *parser.FunctionCallContext) {
	_m.Called(c)
}

// EnterGracePeriodClause provides a mock function with given fields: c
func (_m *KSqlListener) EnterGracePeriodClause(c *parser.GracePeriodClauseContext) {
	_m.Called(c)
}

// EnterGroupBy provides a mock function with given fields: c
func (_m *KSqlListener) EnterGroupBy(c *parser.GroupByContext) {
	_m.Called(c)
}

// EnterHoppingWindowExpression provides a mock function with given fields: c
func (_m *KSqlListener) EnterHoppingWindowExpression(c *parser.HoppingWindowExpressionContext) {
	_m.Called(c)
}

// EnterInList provides a mock function with given fields: c
func (_m *KSqlListener) EnterInList(c *parser.InListContext) {
	_m.Called(c)
}

// EnterInnerJoin provides a mock function with given fields: c
func (_m *KSqlListener) EnterInnerJoin(c *parser.InnerJoinContext) {
	_m.Called(c)
}

// EnterInsertInto provides a mock function with given fields: c
func (_m *KSqlListener) EnterInsertInto(c *parser.InsertIntoContext) {
	_m.Called(c)
}

// EnterInsertValues provides a mock function with given fields: c
func (_m *KSqlListener) EnterInsertValues(c *parser.InsertValuesContext) {
	_m.Called(c)
}

// EnterIntegerLiteral provides a mock function with given fields: c
func (_m *KSqlListener) EnterIntegerLiteral(c *parser.IntegerLiteralContext) {
	_m.Called(c)
}

// EnterIntervalClause provides a mock function with given fields: c
func (_m *KSqlListener) EnterIntervalClause(c *parser.IntervalClauseContext) {
	_m.Called(c)
}

// EnterJoinCriteria provides a mock function with given fields: c
func (_m *KSqlListener) EnterJoinCriteria(c *parser.JoinCriteriaContext) {
	_m.Called(c)
}

// EnterJoinRelation provides a mock function with given fields: c
func (_m *KSqlListener) EnterJoinRelation(c *parser.JoinRelationContext) {
	_m.Called(c)
}

// EnterJoinWindow provides a mock function with given fields: c
func (_m *KSqlListener) EnterJoinWindow(c *parser.JoinWindowContext) {
	_m.Called(c)
}

// EnterJoinWindowSize provides a mock function with given fields: c
func (_m *KSqlListener) EnterJoinWindowSize(c *parser.JoinWindowSizeContext) {
	_m.Called(c)
}

// EnterJoinWindowWithBeforeAndAfter provides a mock function with given fields: c
func (_m *KSqlListener) EnterJoinWindowWithBeforeAndAfter(c *parser.JoinWindowWithBeforeAndAfterContext) {
	_m.Called(c)
}

// EnterJoinedSource provides a mock function with given fields: c
func (_m *KSqlListener) EnterJoinedSource(c *parser.JoinedSourceContext) {
	_m.Called(c)
}

// EnterLambda provides a mock function with given fields: c
func (_m *KSqlListener) EnterLambda(c *parser.LambdaContext) {
	_m.Called(c)
}

// EnterLeftJoin provides a mock function with given fields: c
func (_m *KSqlListener) EnterLeftJoin(c *parser.LeftJoinContext) {
	_m.Called(c)
}

// EnterLike provides a mock function with given fields: c
func (_m *KSqlListener) EnterLike(c *parser.LikeContext) {
	_m.Called(c)
}

// EnterLimitClause provides a mock function with given fields: c
func (_m *KSqlListener) EnterLimitClause(c *parser.LimitClauseContext) {
	_m.Called(c)
}

// EnterListConnectorPlugins provides a mock function with given fields: c
func (_m *KSqlListener) EnterListConnectorPlugins(c *parser.ListConnectorPluginsContext) {
	_m.Called(c)
}

// EnterListConnectors provides a mock function with given fields: c
func (_m *KSqlListener) EnterListConnectors(c *parser.ListConnectorsContext) {
	_m.Called(c)
}

// EnterListFunctions provides a mock function with given fields: c
func (_m *KSqlListener) EnterListFunctions(c *parser.ListFunctionsContext) {
	_m.Called(c)
}

// EnterListProperties provides a mock function with given fields: c
func (_m *KSqlListener) EnterListProperties(c *parser.ListPropertiesContext) {
	_m.Called(c)
}

// EnterListQueries provides a mock function with given fields: c
func (_m *KSqlListener) EnterListQueries(c *parser.ListQueriesContext) {
	_m.Called(c)
}

// EnterListStreams provides a mock function with given fields: c
func (_m *KSqlListener) EnterListStreams(c *parser.ListStreamsContext) {
	_m.Called(c)
}

// EnterListTables provides a mock function with given fields: c
func (_m *KSqlListener) EnterListTables(c *parser.ListTablesContext) {
	_m.Called(c)
}

// EnterListTopics provides a mock function with given fields: c
func (_m *KSqlListener) EnterListTopics(c *parser.ListTopicsContext) {
	_m.Called(c)
}

// EnterListTypes provides a mock function with given fields: c
func (_m *KSqlListener) EnterListTypes(c *parser.ListTypesContext) {
	_m.Called(c)
}

// EnterListVariables provides a mock function with given fields: c
func (_m *KSqlListener) EnterListVariables(c *parser.ListVariablesContext) {
	_m.Called(c)
}

// EnterLiteralExpression provides a mock function with given fields: c
func (_m *KSqlListener) EnterLiteralExpression(c *parser.LiteralExpressionContext) {
	_m.Called(c)
}

// EnterLogicalBinary provides a mock function with given fields: c
func (_m *KSqlListener) EnterLogicalBinary(c *parser.LogicalBinaryContext) {
	_m.Called(c)
}

// EnterLogicalNot provides a mock function with given fields: c
func (_m *KSqlListener) EnterLogicalNot(c *parser.LogicalNotContext) {
	_m.Called(c)
}

// EnterMapConstructor provides a mock function with given fields: c
func (_m *KSqlListener) EnterMapConstructor(c *parser.MapConstructorContext) {
	_m.Called(c)
}

// EnterNonReserved provides a mock function with given fields: c
func (_m *KSqlListener) EnterNonReserved(c *parser.NonReservedContext) {
	_m.Called(c)
}

// EnterNullLiteral provides a mock function with given fields: c
func (_m *KSqlListener) EnterNullLiteral(c *parser.NullLiteralContext) {
	_m.Called(c)
}

// EnterNullPredicate provides a mock function with given fields: c
func (_m *KSqlListener) EnterNullPredicate(c *parser.NullPredicateContext) {
	_m.Called(c)
}

// EnterNumericLiteral provides a mock function with given fields: c
func (_m *KSqlListener) EnterNumericLiteral(c *parser.NumericLiteralContext) {
	_m.Called(c)
}

// EnterOuterJoin provides a mock function with given fields: c
func (_m *KSqlListener) EnterOuterJoin(c *parser.OuterJoinContext) {
	_m.Called(c)
}

// EnterParenthesizedExpression provides a mock function with given fields: c
func (_m *KSqlListener) EnterParenthesizedExpression(c *parser.ParenthesizedExpressionContext) {
	_m.Called(c)
}

// EnterPartitionBy provides a mock function with given fields: c
func (_m *KSqlListener) EnterPartitionBy(c *parser.PartitionByContext) {
	_m.Called(c)
}

// EnterPredicated provides a mock function with given fields: c
func (_m *KSqlListener) EnterPredicated(c *parser.PredicatedContext) {
	_m.Called(c)
}

// EnterPrintClause provides a mock function with given fields: c
func (_m *KSqlListener) EnterPrintClause(c *parser.PrintClauseContext) {
	_m.Called(c)
}

// EnterPrintTopic provides a mock function with given fields: c
func (_m *KSqlListener) EnterPrintTopic(c *parser.PrintTopicContext) {
	_m.Called(c)
}

// EnterQualifiedColumnReference provides a mock function with given fields: c
func (_m *KSqlListener) EnterQualifiedColumnReference(c *parser.QualifiedColumnReferenceContext) {
	_m.Called(c)
}

// EnterQuery provides a mock function with given fields: c
func (_m *KSqlListener) EnterQuery(c *parser.QueryContext) {
	_m.Called(c)
}

// EnterQueryStatement provides a mock function with given fields: c
func (_m *KSqlListener) EnterQueryStatement(c *parser.QueryStatementContext) {
	_m.Called(c)
}

// EnterQuotedIdentifierAlternative provides a mock function with given fields: c
func (_m *KSqlListener) EnterQuotedIdentifierAlternative(c *parser.QuotedIdentifierAlternativeContext) {
	_m.Called(c)
}

// EnterRegisterType provides a mock function with given fields: c
func (_m *KSqlListener) EnterRegisterType(c *parser.RegisterTypeContext) {
	_m.Called(c)
}

// EnterRelationDefault provides a mock function with given fields: c
func (_m *KSqlListener) EnterRelationDefault(c *parser.RelationDefaultContext) {
	_m.Called(c)
}

// EnterResultMaterialization provides a mock function with given fields: c
func (_m *KSqlListener) EnterResultMaterialization(c *parser.ResultMaterializationContext) {
	_m.Called(c)
}

// EnterRetentionClause provides a mock function with given fields: c
func (_m *KSqlListener) EnterRetentionClause(c *parser.RetentionClauseContext) {
	_m.Called(c)
}

// EnterRunScript provides a mock function with given fields: c
func (_m *KSqlListener) EnterRunScript(c *parser.RunScriptContext) {
	_m.Called(c)
}

// EnterSearchedCase provides a mock function with given fields: c
func (_m *KSqlListener) EnterSearchedCase(c *parser.SearchedCaseContext) {
	_m.Called(c)
}

// EnterSelectAll provides a mock function with given fields: c
func (_m *KSqlListener) EnterSelectAll(c *parser.SelectAllContext) {
	_m.Called(c)
}

// EnterSelectSingle provides a mock function with given fields: c
func (_m *KSqlListener) EnterSelectSingle(c *parser.SelectSingleContext) {
	_m.Called(c)
}

// EnterSessionWindowExpression provides a mock function with given fields: c
func (_m *KSqlListener) EnterSessionWindowExpression(c *parser.SessionWindowExpressionContext) {
	_m.Called(c)
}

// EnterSetProperty provides a mock function with given fields: c
func (_m *KSqlListener) EnterSetProperty(c *parser.SetPropertyContext) {
	_m.Called(c)
}

// EnterShowColumns provides a mock function with given fields: c
func (_m *KSqlListener) EnterShowColumns(c *parser.ShowColumnsContext) {
	_m.Called(c)
}

// EnterSimpleCase provides a mock function with given fields: c
func (_m *KSqlListener) EnterSimpleCase(c *parser.SimpleCaseContext) {
	_m.Called(c)
}

// EnterSingleExpression provides a mock function with given fields: c
func (_m *KSqlListener) EnterSingleExpression(c *parser.SingleExpressionContext) {
	_m.Called(c)
}

// EnterSingleJoinWindow provides a mock function with given fields: c
func (_m *KSqlListener) EnterSingleJoinWindow(c *parser.SingleJoinWindowContext) {
	_m.Called(c)
}

// EnterSingleStatement provides a mock function with given fields: c
func (_m *KSqlListener) EnterSingleStatement(c *parser.SingleStatementContext) {
	_m.Called(c)
}

// EnterSourceName provides a mock function with given fields: c
func (_m *KSqlListener) EnterSourceName(c *parser.SourceNameContext) {
	_m.Called(c)
}

// EnterSqltype provides a mock function with given fields: c
func (_m *KSqlListener) EnterSqltype(c *parser.SqltypeContext) {
	_m.Called(c)
}

// EnterStatements provides a mock function with given fields: c
func (_m *KSqlListener) EnterStatements(c *parser.StatementsContext) {
	_m.Called(c)
}

// EnterStringLiteral provides a mock function with given fields: c
func (_m *KSqlListener) EnterStringLiteral(c *parser.StringLiteralContext) {
	_m.Called(c)
}

// EnterStructConstructor provides a mock function with given fields: c
func (_m *KSqlListener) EnterStructConstructor(c *parser.StructConstructorContext) {
	_m.Called(c)
}

// EnterSubscript provides a mock function with given fields: c
func (_m *KSqlListener) EnterSubscript(c *parser.SubscriptContext) {
	_m.Called(c)
}

// EnterTableElement provides a mock function with given fields: c
func (_m *KSqlListener) EnterTableElement(c *parser.TableElementContext) {
	_m.Called(c)
}

// EnterTableElements provides a mock function with given fields: c
func (_m *KSqlListener) EnterTableElements(c *parser.TableElementsContext) {
	_m.Called(c)
}

// EnterTableName provides a mock function with given fields: c
func (_m *KSqlListener) EnterTableName(c *parser.TableNameContext) {
	_m.Called(c)
}

// EnterTableProperties provides a mock function with given fields: c
func (_m *KSqlListener) EnterTableProperties(c *parser.TablePropertiesContext) {
	_m.Called(c)
}

// EnterTableProperty provides a mock function with given fields: c
func (_m *KSqlListener) EnterTableProperty(c *parser.TablePropertyContext) {
	_m.Called(c)
}

// EnterTerminateQuery provides a mock function with given fields: c
func (_m *KSqlListener) EnterTerminateQuery(c *parser.TerminateQueryContext) {
	_m.Called(c)
}

// EnterTestStatement provides a mock function with given fields: c
func (_m *KSqlListener) EnterTestStatement(c *parser.TestStatementContext) {
	_m.Called(c)
}

// EnterTimeZoneString provides a mock function with given fields: c
func (_m *KSqlListener) EnterTimeZoneString(c *parser.TimeZoneStringContext) {
	_m.Called(c)
}

// EnterTumblingWindowExpression provides a mock function with given fields: c
func (_m *KSqlListener) EnterTumblingWindowExpression(c *parser.TumblingWindowExpressionContext) {
	_m.Called(c)
}

// EnterTypeConstructor provides a mock function with given fields: c
func (_m *KSqlListener) EnterTypeConstructor(c *parser.TypeConstructorContext) {
	_m.Called(c)
}

// EnterTypeParameter provides a mock function with given fields: c
func (_m *KSqlListener) EnterTypeParameter(c *parser.TypeParameterContext) {
	_m.Called(c)
}

// EnterUndefineVariable provides a mock function with given fields: c
func (_m *KSqlListener) EnterUndefineVariable(c *parser.UndefineVariableContext) {
	_m.Called(c)
}

// EnterUnquotedIdentifier provides a mock function with given fields: c
func (_m *KSqlListener) EnterUnquotedIdentifier(c *parser.UnquotedIdentifierContext) {
	_m.Called(c)
}

// EnterUnsetProperty provides a mock function with given fields: c
func (_m *KSqlListener) EnterUnsetProperty(c *parser.UnsetPropertyContext) {
	_m.Called(c)
}

// EnterValueExpressionDefault provides a mock function with given fields: c
func (_m *KSqlListener) EnterValueExpressionDefault(c *parser.ValueExpressionDefaultContext) {
	_m.Called(c)
}

// EnterValues provides a mock function with given fields: c
func (_m *KSqlListener) EnterValues(c *parser.ValuesContext) {
	_m.Called(c)
}

// EnterVariableIdentifier provides a mock function with given fields: c
func (_m *KSqlListener) EnterVariableIdentifier(c *parser.VariableIdentifierContext) {
	_m.Called(c)
}

// EnterVariableLiteral provides a mock function with given fields: c
func (_m *KSqlListener) EnterVariableLiteral(c *parser.VariableLiteralContext) {
	_m.Called(c)
}

// EnterVariableName provides a mock function with given fields: c
func (_m *KSqlListener) EnterVariableName(c *parser.VariableNameContext) {
	_m.Called(c)
}

// EnterVariableValue provides a mock function with given fields: c
func (_m *KSqlListener) EnterVariableValue(c *parser.VariableValueContext) {
	_m.Called(c)
}

// EnterWhenClause provides a mock function with given fields: c
func (_m *KSqlListener) EnterWhenClause(c *parser.WhenClauseContext) {
	_m.Called(c)
}

// EnterWindowExpression provides a mock function with given fields: c
func (_m *KSqlListener) EnterWindowExpression(c *parser.WindowExpressionContext) {
	_m.Called(c)
}

// EnterWindowUnit provides a mock function with given fields: c
func (_m *KSqlListener) EnterWindowUnit(c *parser.WindowUnitContext) {
	_m.Called(c)
}

// ExitAliasedRelation provides a mock function with given fields: c
func (_m *KSqlListener) ExitAliasedRelation(c *parser.AliasedRelationContext) {
	_m.Called(c)
}

// ExitAlterOption provides a mock function with given fields: c
func (_m *KSqlListener) ExitAlterOption(c *parser.AlterOptionContext) {
	_m.Called(c)
}

// ExitAlterSource provides a mock function with given fields: c
func (_m *KSqlListener) ExitAlterSource(c *parser.AlterSourceContext) {
	_m.Called(c)
}

// ExitArithmeticBinary provides a mock function with given fields: c
func (_m *KSqlListener) ExitArithmeticBinary(c *parser.ArithmeticBinaryContext) {
	_m.Called(c)
}

// ExitArithmeticUnary provides a mock function with given fields: c
func (_m *KSqlListener) ExitArithmeticUnary(c *parser.ArithmeticUnaryContext) {
	_m.Called(c)
}

// ExitArrayConstructor provides a mock function with given fields: c
func (_m *KSqlListener) ExitArrayConstructor(c *parser.ArrayConstructorContext) {
	_m.Called(c)
}

// ExitAssertStream provides a mock function with given fields: c
func (_m *KSqlListener) ExitAssertStream(c *parser.AssertStreamContext) {
	_m.Called(c)
}

// ExitAssertTable provides a mock function with given fields: c
func (_m *KSqlListener) ExitAssertTable(c *parser.AssertTableContext) {
	_m.Called(c)
}

// ExitAssertTombstone provides a mock function with given fields: c
func (_m *KSqlListener) ExitAssertTombstone(c *parser.AssertTombstoneContext) {
	_m.Called(c)
}

// ExitAssertValues provides a mock function with given fields: c
func (_m *KSqlListener) ExitAssertValues(c *parser.AssertValuesContext) {
	_m.Called(c)
}

// ExitAtTimeZone provides a mock function with given fields: c
func (_m *KSqlListener) ExitAtTimeZone(c *parser.AtTimeZoneContext) {
	_m.Called(c)
}

// ExitBackQuotedIdentifier provides a mock function with given fields: c
func (_m *KSqlListener) ExitBackQuotedIdentifier(c *parser.BackQuotedIdentifierContext) {
	_m.Called(c)
}

// ExitBaseType provides a mock function with given fields: c
func (_m *KSqlListener) ExitBaseType(c *parser.BaseTypeContext) {
	_m.Called(c)
}

// ExitBetween provides a mock function with given fields: c
func (_m *KSqlListener) ExitBetween(c *parser.BetweenContext) {
	_m.Called(c)
}

// ExitBooleanDefault provides a mock function with given fields: c
func (_m *KSqlListener) ExitBooleanDefault(c *parser.BooleanDefaultContext) {
	_m.Called(c)
}

// ExitBooleanLiteral provides a mock function with given fields: c
func (_m *KSqlListener) ExitBooleanLiteral(c *parser.BooleanLiteralContext) {
	_m.Called(c)
}

// ExitBooleanValue provides a mock function with given fields: c
func (_m *KSqlListener) ExitBooleanValue(c *parser.BooleanValueContext) {
	_m.Called(c)
}

// ExitCast provides a mock function with given fields: c
func (_m *KSqlListener) ExitCast(c *parser.CastContext) {
	_m.Called(c)
}

// ExitColumnReference provides a mock function with given fields: c
func (_m *KSqlListener) ExitColumnReference(c *parser.ColumnReferenceContext) {
	_m.Called(c)
}

// ExitColumns provides a mock function with given fields: c
func (_m *KSqlListener) ExitColumns(c *parser.ColumnsContext) {
	_m.Called(c)
}

// ExitComparison provides a mock function with given fields: c
func (_m *KSqlListener) ExitComparison(c *parser.ComparisonContext) {
	_m.Called(c)
}

// ExitComparisonOperator provides a mock function with given fields: c
func (_m *KSqlListener) ExitComparisonOperator(c *parser.ComparisonOperatorContext) {
	_m.Called(c)
}

// ExitConcatenation provides a mock function with given fields: c
func (_m *KSqlListener) ExitConcatenation(c *parser.ConcatenationContext) {
	_m.Called(c)
}

// ExitCreateConnector provides a mock function with given fields: c
func (_m *KSqlListener) ExitCreateConnector(c *parser.CreateConnectorContext) {
	_m.Called(c)
}

// ExitCreateStream provides a mock function with given fields: c
func (_m *KSqlListener) ExitCreateStream(c *parser.CreateStreamContext) {
	_m.Called(c)
}

// ExitCreateStreamAs provides a mock function with given fields: c
func (_m *KSqlListener) ExitCreateStreamAs(c *parser.CreateStreamAsContext) {
	_m.Called(c)
}

// ExitCreateTable provides a mock function with given fields: c
func (_m *KSqlListener) ExitCreateTable(c *parser.CreateTableContext) {
	_m.Called(c)
}

// ExitCreateTableAs provides a mock function with given fields: c
func (_m *KSqlListener) ExitCreateTableAs(c *parser.CreateTableAsContext) {
	_m.Called(c)
}

// ExitDecimalLiteral provides a mock function with given fields: c
func (_m *KSqlListener) ExitDecimalLiteral(c *parser.DecimalLiteralContext) {
	_m.Called(c)
}

// ExitDefineVariable provides a mock function with given fields: c
func (_m *KSqlListener) ExitDefineVariable(c *parser.DefineVariableContext) {
	_m.Called(c)
}

// ExitDereference provides a mock function with given fields: c
func (_m *KSqlListener) ExitDereference(c *parser.DereferenceContext) {
	_m.Called(c)
}

// ExitDescribeConnector provides a mock function with given fields: c
func (_m *KSqlListener) ExitDescribeConnector(c *parser.DescribeConnectorContext) {
	_m.Called(c)
}

// ExitDescribeFunction provides a mock function with given fields: c
func (_m *KSqlListener) ExitDescribeFunction(c *parser.DescribeFunctionContext) {
	_m.Called(c)
}

// ExitDescribeStreams provides a mock function with given fields: c
func (_m *KSqlListener) ExitDescribeStreams(c *parser.DescribeStreamsContext) {
	_m.Called(c)
}

// ExitDigitIdentifier provides a mock function with given fields: c
func (_m *KSqlListener) ExitDigitIdentifier(c *parser.DigitIdentifierContext) {
	_m.Called(c)
}

// ExitDistinctFrom provides a mock function with given fields: c
func (_m *KSqlListener) ExitDistinctFrom(c *parser.DistinctFromContext) {
	_m.Called(c)
}

// ExitDropConnector provides a mock function with given fields: c
func (_m *KSqlListener) ExitDropConnector(c *parser.DropConnectorContext) {
	_m.Called(c)
}

// ExitDropStream provides a mock function with given fields: c
func (_m *KSqlListener) ExitDropStream(c *parser.DropStreamContext) {
	_m.Called(c)
}

// ExitDropTable provides a mock function with given fields: c
func (_m *KSqlListener) ExitDropTable(c *parser.DropTableContext) {
	_m.Called(c)
}

// ExitDropType provides a mock function with given fields: c
func (_m *KSqlListener) ExitDropType(c *parser.DropTypeContext) {
	_m.Called(c)
}

// ExitEveryRule provides a mock function with given fields: ctx
func (_m *KSqlListener) ExitEveryRule(ctx antlr.ParserRuleContext) {
	_m.Called(ctx)
}

// ExitExplain provides a mock function with given fields: c
func (_m *KSqlListener) ExitExplain(c *parser.ExplainContext) {
	_m.Called(c)
}

// ExitExpression provides a mock function with given fields: c
func (_m *KSqlListener) ExitExpression(c *parser.ExpressionContext) {
	_m.Called(c)
}

// ExitFloatLiteral provides a mock function with given fields: c
func (_m *KSqlListener) ExitFloatLiteral(c *parser.FloatLiteralContext) {
	_m.Called(c)
}

// ExitFunctionArgument provides a mock function with given fields: c
func (_m *KSqlListener) ExitFunctionArgument(c *parser.FunctionArgumentContext) {
	_m.Called(c)
}

// ExitFunctionCall provides a mock function with given fields: c
func (_m *KSqlListener) ExitFunctionCall(c *parser.FunctionCallContext) {
	_m.Called(c)
}

// ExitGracePeriodClause provides a mock function with given fields: c
func (_m *KSqlListener) ExitGracePeriodClause(c *parser.GracePeriodClauseContext) {
	_m.Called(c)
}

// ExitGroupBy provides a mock function with given fields: c
func (_m *KSqlListener) ExitGroupBy(c *parser.GroupByContext) {
	_m.Called(c)
}

// ExitHoppingWindowExpression provides a mock function with given fields: c
func (_m *KSqlListener) ExitHoppingWindowExpression(c *parser.HoppingWindowExpressionContext) {
	_m.Called(c)
}

// ExitInList provides a mock function with given fields: c
func (_m *KSqlListener) ExitInList(c *parser.InListContext) {
	_m.Called(c)
}

// ExitInnerJoin provides a mock function with given fields: c
func (_m *KSqlListener) ExitInnerJoin(c *parser.InnerJoinContext) {
	_m.Called(c)
}

// ExitInsertInto provides a mock function with given fields: c
func (_m *KSqlListener) ExitInsertInto(c *parser.InsertIntoContext) {
	_m.Called(c)
}

// ExitInsertValues provides a mock function with given fields: c
func (_m *KSqlListener) ExitInsertValues(c *parser.InsertValuesContext) {
	_m.Called(c)
}

// ExitIntegerLiteral provides a mock function with given fields: c
func (_m *KSqlListener) ExitIntegerLiteral(c *parser.IntegerLiteralContext) {
	_m.Called(c)
}

// ExitIntervalClause provides a mock function with given fields: c
func (_m *KSqlListener) ExitIntervalClause(c *parser.IntervalClauseContext) {
	_m.Called(c)
}

// ExitJoinCriteria provides a mock function with given fields: c
func (_m *KSqlListener) ExitJoinCriteria(c *parser.JoinCriteriaContext) {
	_m.Called(c)
}

// ExitJoinRelation provides a mock function with given fields: c
func (_m *KSqlListener) ExitJoinRelation(c *parser.JoinRelationContext) {
	_m.Called(c)
}

// ExitJoinWindow provides a mock function with given fields: c
func (_m *KSqlListener) ExitJoinWindow(c *parser.JoinWindowContext) {
	_m.Called(c)
}

// ExitJoinWindowSize provides a mock function with given fields: c
func (_m *KSqlListener) ExitJoinWindowSize(c *parser.JoinWindowSizeContext) {
	_m.Called(c)
}

// ExitJoinWindowWithBeforeAndAfter provides a mock function with given fields: c
func (_m *KSqlListener) ExitJoinWindowWithBeforeAndAfter(c *parser.JoinWindowWithBeforeAndAfterContext) {
	_m.Called(c)
}

// ExitJoinedSource provides a mock function with given fields: c
func (_m *KSqlListener) ExitJoinedSource(c *parser.JoinedSourceContext) {
	_m.Called(c)
}

// ExitLambda provides a mock function with given fields: c
func (_m *KSqlListener) ExitLambda(c *parser.LambdaContext) {
	_m.Called(c)
}

// ExitLeftJoin provides a mock function with given fields: c
func (_m *KSqlListener) ExitLeftJoin(c *parser.LeftJoinContext) {
	_m.Called(c)
}

// ExitLike provides a mock function with given fields: c
func (_m *KSqlListener) ExitLike(c *parser.LikeContext) {
	_m.Called(c)
}

// ExitLimitClause provides a mock function with given fields: c
func (_m *KSqlListener) ExitLimitClause(c *parser.LimitClauseContext) {
	_m.Called(c)
}

// ExitListConnectorPlugins provides a mock function with given fields: c
func (_m *KSqlListener) ExitListConnectorPlugins(c *parser.ListConnectorPluginsContext) {
	_m.Called(c)
}

// ExitListConnectors provides a mock function with given fields: c
func (_m *KSqlListener) ExitListConnectors(c *parser.ListConnectorsContext) {
	_m.Called(c)
}

// ExitListFunctions provides a mock function with given fields: c
func (_m *KSqlListener) ExitListFunctions(c *parser.ListFunctionsContext) {
	_m.Called(c)
}

// ExitListProperties provides a mock function with given fields: c
func (_m *KSqlListener) ExitListProperties(c *parser.ListPropertiesContext) {
	_m.Called(c)
}

// ExitListQueries provides a mock function with given fields: c
func (_m *KSqlListener) ExitListQueries(c *parser.ListQueriesContext) {
	_m.Called(c)
}

// ExitListStreams provides a mock function with given fields: c
func (_m *KSqlListener) ExitListStreams(c *parser.ListStreamsContext) {
	_m.Called(c)
}

// ExitListTables provides a mock function with given fields: c
func (_m *KSqlListener) ExitListTables(c *parser.ListTablesContext) {
	_m.Called(c)
}

// ExitListTopics provides a mock function with given fields: c
func (_m *KSqlListener) ExitListTopics(c *parser.ListTopicsContext) {
	_m.Called(c)
}

// ExitListTypes provides a mock function with given fields: c
func (_m *KSqlListener) ExitListTypes(c *parser.ListTypesContext) {
	_m.Called(c)
}

// ExitListVariables provides a mock function with given fields: c
func (_m *KSqlListener) ExitListVariables(c *parser.ListVariablesContext) {
	_m.Called(c)
}

// ExitLiteralExpression provides a mock function with given fields: c
func (_m *KSqlListener) ExitLiteralExpression(c *parser.LiteralExpressionContext) {
	_m.Called(c)
}

// ExitLogicalBinary provides a mock function with given fields: c
func (_m *KSqlListener) ExitLogicalBinary(c *parser.LogicalBinaryContext) {
	_m.Called(c)
}

// ExitLogicalNot provides a mock function with given fields: c
func (_m *KSqlListener) ExitLogicalNot(c *parser.LogicalNotContext) {
	_m.Called(c)
}

// ExitMapConstructor provides a mock function with given fields: c
func (_m *KSqlListener) ExitMapConstructor(c *parser.MapConstructorContext) {
	_m.Called(c)
}

// ExitNonReserved provides a mock function with given fields: c
func (_m *KSqlListener) ExitNonReserved(c *parser.NonReservedContext) {
	_m.Called(c)
}

// ExitNullLiteral provides a mock function with given fields: c
func (_m *KSqlListener) ExitNullLiteral(c *parser.NullLiteralContext) {
	_m.Called(c)
}

// ExitNullPredicate provides a mock function with given fields: c
func (_m *KSqlListener) ExitNullPredicate(c *parser.NullPredicateContext) {
	_m.Called(c)
}

// ExitNumericLiteral provides a mock function with given fields: c
func (_m *KSqlListener) ExitNumericLiteral(c *parser.NumericLiteralContext) {
	_m.Called(c)
}

// ExitOuterJoin provides a mock function with given fields: c
func (_m *KSqlListener) ExitOuterJoin(c *parser.OuterJoinContext) {
	_m.Called(c)
}

// ExitParenthesizedExpression provides a mock function with given fields: c
func (_m *KSqlListener) ExitParenthesizedExpression(c *parser.ParenthesizedExpressionContext) {
	_m.Called(c)
}

// ExitPartitionBy provides a mock function with given fields: c
func (_m *KSqlListener) ExitPartitionBy(c *parser.PartitionByContext) {
	_m.Called(c)
}

// ExitPredicated provides a mock function with given fields: c
func (_m *KSqlListener) ExitPredicated(c *parser.PredicatedContext) {
	_m.Called(c)
}

// ExitPrintClause provides a mock function with given fields: c
func (_m *KSqlListener) ExitPrintClause(c *parser.PrintClauseContext) {
	_m.Called(c)
}

// ExitPrintTopic provides a mock function with given fields: c
func (_m *KSqlListener) ExitPrintTopic(c *parser.PrintTopicContext) {
	_m.Called(c)
}

// ExitQualifiedColumnReference provides a mock function with given fields: c
func (_m *KSqlListener) ExitQualifiedColumnReference(c *parser.QualifiedColumnReferenceContext) {
	_m.Called(c)
}

// ExitQuery provides a mock function with given fields: c
func (_m *KSqlListener) ExitQuery(c *parser.QueryContext) {
	_m.Called(c)
}

// ExitQueryStatement provides a mock function with given fields: c
func (_m *KSqlListener) ExitQueryStatement(c *parser.QueryStatementContext) {
	_m.Called(c)
}

// ExitQuotedIdentifierAlternative provides a mock function with given fields: c
func (_m *KSqlListener) ExitQuotedIdentifierAlternative(c *parser.QuotedIdentifierAlternativeContext) {
	_m.Called(c)
}

// ExitRegisterType provides a mock function with given fields: c
func (_m *KSqlListener) ExitRegisterType(c *parser.RegisterTypeContext) {
	_m.Called(c)
}

// ExitRelationDefault provides a mock function with given fields: c
func (_m *KSqlListener) ExitRelationDefault(c *parser.RelationDefaultContext) {
	_m.Called(c)
}

// ExitResultMaterialization provides a mock function with given fields: c
func (_m *KSqlListener) ExitResultMaterialization(c *parser.ResultMaterializationContext) {
	_m.Called(c)
}

// ExitRetentionClause provides a mock function with given fields: c
func (_m *KSqlListener) ExitRetentionClause(c *parser.RetentionClauseContext) {
	_m.Called(c)
}

// ExitRunScript provides a mock function with given fields: c
func (_m *KSqlListener) ExitRunScript(c *parser.RunScriptContext) {
	_m.Called(c)
}

// ExitSearchedCase provides a mock function with given fields: c
func (_m *KSqlListener) ExitSearchedCase(c *parser.SearchedCaseContext) {
	_m.Called(c)
}

// ExitSelectAll provides a mock function with given fields: c
func (_m *KSqlListener) ExitSelectAll(c *parser.SelectAllContext) {
	_m.Called(c)
}

// ExitSelectSingle provides a mock function with given fields: c
func (_m *KSqlListener) ExitSelectSingle(c *parser.SelectSingleContext) {
	_m.Called(c)
}

// ExitSessionWindowExpression provides a mock function with given fields: c
func (_m *KSqlListener) ExitSessionWindowExpression(c *parser.SessionWindowExpressionContext) {
	_m.Called(c)
}

// ExitSetProperty provides a mock function with given fields: c
func (_m *KSqlListener) ExitSetProperty(c *parser.SetPropertyContext) {
	_m.Called(c)
}

// ExitShowColumns provides a mock function with given fields: c
func (_m *KSqlListener) ExitShowColumns(c *parser.ShowColumnsContext) {
	_m.Called(c)
}

// ExitSimpleCase provides a mock function with given fields: c
func (_m *KSqlListener) ExitSimpleCase(c *parser.SimpleCaseContext) {
	_m.Called(c)
}

// ExitSingleExpression provides a mock function with given fields: c
func (_m *KSqlListener) ExitSingleExpression(c *parser.SingleExpressionContext) {
	_m.Called(c)
}

// ExitSingleJoinWindow provides a mock function with given fields: c
func (_m *KSqlListener) ExitSingleJoinWindow(c *parser.SingleJoinWindowContext) {
	_m.Called(c)
}

// ExitSingleStatement provides a mock function with given fields: c
func (_m *KSqlListener) ExitSingleStatement(c *parser.SingleStatementContext) {
	_m.Called(c)
}

// ExitSourceName provides a mock function with given fields: c
func (_m *KSqlListener) ExitSourceName(c *parser.SourceNameContext) {
	_m.Called(c)
}

// ExitSqltype provides a mock function with given fields: c
func (_m *KSqlListener) ExitSqltype(c *parser.SqltypeContext) {
	_m.Called(c)
}

// ExitStatements provides a mock function with given fields: c
func (_m *KSqlListener) ExitStatements(c *parser.StatementsContext) {
	_m.Called(c)
}

// ExitStringLiteral provides a mock function with given fields: c
func (_m *KSqlListener) ExitStringLiteral(c *parser.StringLiteralContext) {
	_m.Called(c)
}

// ExitStructConstructor provides a mock function with given fields: c
func (_m *KSqlListener) ExitStructConstructor(c *parser.StructConstructorContext) {
	_m.Called(c)
}

// ExitSubscript provides a mock function with given fields: c
func (_m *KSqlListener) ExitSubscript(c *parser.SubscriptContext) {
	_m.Called(c)
}

// ExitTableElement provides a mock function with given fields: c
func (_m *KSqlListener) ExitTableElement(c *parser.TableElementContext) {
	_m.Called(c)
}

// ExitTableElements provides a mock function with given fields: c
func (_m *KSqlListener) ExitTableElements(c *parser.TableElementsContext) {
	_m.Called(c)
}

// ExitTableName provides a mock function with given fields: c
func (_m *KSqlListener) ExitTableName(c *parser.TableNameContext) {
	_m.Called(c)
}

// ExitTableProperties provides a mock function with given fields: c
func (_m *KSqlListener) ExitTableProperties(c *parser.TablePropertiesContext) {
	_m.Called(c)
}

// ExitTableProperty provides a mock function with given fields: c
func (_m *KSqlListener) ExitTableProperty(c *parser.TablePropertyContext) {
	_m.Called(c)
}

// ExitTerminateQuery provides a mock function with given fields: c
func (_m *KSqlListener) ExitTerminateQuery(c *parser.TerminateQueryContext) {
	_m.Called(c)
}

// ExitTestStatement provides a mock function with given fields: c
func (_m *KSqlListener) ExitTestStatement(c *parser.TestStatementContext) {
	_m.Called(c)
}

// ExitTimeZoneString provides a mock function with given fields: c
func (_m *KSqlListener) ExitTimeZoneString(c *parser.TimeZoneStringContext) {
	_m.Called(c)
}

// ExitTumblingWindowExpression provides a mock function with given fields: c
func (_m *KSqlListener) ExitTumblingWindowExpression(c *parser.TumblingWindowExpressionContext) {
	_m.Called(c)
}

// ExitTypeConstructor provides a mock function with given fields: c
func (_m *KSqlListener) ExitTypeConstructor(c *parser.TypeConstructorContext) {
	_m.Called(c)
}

// ExitTypeParameter provides a mock function with given fields: c
func (_m *KSqlListener) ExitTypeParameter(c *parser.TypeParameterContext) {
	_m.Called(c)
}

// ExitUndefineVariable provides a mock function with given fields: c
func (_m *KSqlListener) ExitUndefineVariable(c *parser.UndefineVariableContext) {
	_m.Called(c)
}

// ExitUnquotedIdentifier provides a mock function with given fields: c
func (_m *KSqlListener) ExitUnquotedIdentifier(c *parser.UnquotedIdentifierContext) {
	_m.Called(c)
}

// ExitUnsetProperty provides a mock function with given fields: c
func (_m *KSqlListener) ExitUnsetProperty(c *parser.UnsetPropertyContext) {
	_m.Called(c)
}

// ExitValueExpressionDefault provides a mock function with given fields: c
func (_m *KSqlListener) ExitValueExpressionDefault(c *parser.ValueExpressionDefaultContext) {
	_m.Called(c)
}

// ExitValues provides a mock function with given fields: c
func (_m *KSqlListener) ExitValues(c *parser.ValuesContext) {
	_m.Called(c)
}

// ExitVariableIdentifier provides a mock function with given fields: c
func (_m *KSqlListener) ExitVariableIdentifier(c *parser.VariableIdentifierContext) {
	_m.Called(c)
}

// ExitVariableLiteral provides a mock function with given fields: c
func (_m *KSqlListener) ExitVariableLiteral(c *parser.VariableLiteralContext) {
	_m.Called(c)
}

// ExitVariableName provides a mock function with given fields: c
func (_m *KSqlListener) ExitVariableName(c *parser.VariableNameContext) {
	_m.Called(c)
}

// ExitVariableValue provides a mock function with given fields: c
func (_m *KSqlListener) ExitVariableValue(c *parser.VariableValueContext) {
	_m.Called(c)
}

// ExitWhenClause provides a mock function with given fields: c
func (_m *KSqlListener) ExitWhenClause(c *parser.WhenClauseContext) {
	_m.Called(c)
}

// ExitWindowExpression provides a mock function with given fields: c
func (_m *KSqlListener) ExitWindowExpression(c *parser.WindowExpressionContext) {
	_m.Called(c)
}

// ExitWindowUnit provides a mock function with given fields: c
func (_m *KSqlListener) ExitWindowUnit(c *parser.WindowUnitContext) {
	_m.Called(c)
}

// VisitErrorNode provides a mock function with given fields: node
func (_m *KSqlListener) VisitErrorNode(node antlr.ErrorNode) {
	_m.Called(node)
}

// VisitTerminal provides a mock function with given fields: node
func (_m *KSqlListener) VisitTerminal(node antlr.TerminalNode) {
	_m.Called(node)
}
